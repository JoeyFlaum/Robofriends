{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","console","log"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GACzB,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAM,OAAOC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACA,8BACMA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,cAAC,EAAD,CAEIR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,UCKtBS,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACA,qBAAKT,UAAY,MAAjB,SACI,uBACIA,UAAY,mCACZU,KAAO,SACPC,YAAc,gBACdC,SAAYH,OCETI,G,MATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aC0CJC,E,kDArCX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdrC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJX,E,gEAQM,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAOrC,IAAD,EACgCC,KAAKN,MAA7BvB,EADR,EACQA,OAAQoB,EADhB,EACgBA,YACVU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACrC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAEzD,OAAQjC,EAAOmC,OAGP,sBAAKvC,UAAY,KAAjB,UACA,oBAAIA,UAAW,KAAf,yBACA,cAAC,EAAD,CAAWS,aAAgBwB,KAAKZ,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAU8B,SANxB,iD,GAzBEM,IAAMC,WCGTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SAKlDX,EAAgBY,QAAQC,O","file":"static/js/main.ee72f4d3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) =>{\r\n    return(\r\n        <div className =\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt = \"Robo\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n   return( \r\n   <div>       \r\n        {robots.map((user, i) => {\r\n            return(\r\n                <Card \r\n                    key = {robots[i].id}  \r\n                    id = {robots[i].id} \r\n                    name = {robots[i].name} \r\n                    email = {robots[i].email} \r\n                />         \r\n            );\r\n        })\r\n    }  \r\n    </div>\r\n   ) \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n    <div className = 'pa2'>\r\n        <input\r\n            className = 'pa3 ba b--green bg-lightest-blue' \r\n            type = \"search\" \r\n            placeholder = \"Search Robots\"\r\n            onChange = {searchChange}\r\n        />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor() {\r\n        super() \r\n            this.state = {\r\n                robots: [],\r\n                searchfield: ''\r\n            }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n            \r\n    }\r\n    \r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n    render(){\r\n            const { robots, searchfield } = this.state;\r\n            const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        return !robots.length ?\r\n                <h1>Loading....</h1> \r\n            :\r\n            (   <div className = 'tc'>\r\n                <h1 className ='f1'>Robofriends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots = {filteredRobots} /> \r\n                </Scroll>\r\n            </div>\r\n            );\r\n    \r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}